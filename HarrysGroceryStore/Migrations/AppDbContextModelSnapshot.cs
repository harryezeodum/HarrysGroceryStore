// <auto-generated />
using HarrysGroceryStore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HarrysGroceryStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HarrysGroceryStore.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("AdminId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Email = "johndoe@aol.com",
                            EmployeeId = 1,
                            PassWord = "baller21!"
                        },
                        new
                        {
                            AdminId = 2,
                            Email = "michaelchan@aol.com",
                            EmployeeId = 2,
                            PassWord = "christian2005!"
                        },
                        new
                        {
                            AdminId = 3,
                            Email = "clairejonnas@gmail.com",
                            EmployeeId = 3,
                            PassWord = "ngozi2021!"
                        },
                        new
                        {
                            AdminId = 4,
                            Email = "smith.johnson@gmail.com",
                            EmployeeId = 4,
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            AdminId = 5,
                            Email = "vokeoluwafemi@aol.com",
                            EmployeeId = 5,
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            AdminId = 6,
                            Email = "harryporter@yahoo.com",
                            EmployeeId = 6,
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            AdminId = 7,
                            Email = "israelruiz@outlook.com",
                            EmployeeId = 7,
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            AdminId = 8,
                            Email = "austin.capstone@outlook.com",
                            EmployeeId = 8,
                            PassWord = "ada2020!"
                        });
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "10612 Smith Street",
                            City = "Pasadena",
                            FirstName = "Genesis",
                            LastName = "Howard",
                            PhoneNumber = "281-789-1201",
                            State = "Texas",
                            ZipCode = "77786"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "588 Alington Place",
                            City = "Pearland",
                            FirstName = "Christian",
                            LastName = "Walcot",
                            PhoneNumber = "281-789-1201",
                            State = "Texas",
                            ZipCode = "77394"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "12145 South Loop West",
                            City = "Houston",
                            FirstName = "Ngozi",
                            LastName = "Offodile",
                            PhoneNumber = "281-213-0090",
                            State = "Texas",
                            ZipCode = "77092"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "10612 Barker Street",
                            City = "Katy",
                            FirstName = "Adaobi",
                            LastName = "Eze",
                            PhoneNumber = "713-356-2190",
                            State = "Texas",
                            ZipCode = "77492"
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "1239 Katy Lane #2512",
                            City = "Crypress",
                            FirstName = "Tichelle",
                            LastName = "Miller",
                            PhoneNumber = "713-214-3345",
                            State = "Texas",
                            ZipCode = "77041"
                        },
                        new
                        {
                            CustomerId = 6,
                            Address = "10612 Holly Spring Ln",
                            City = "Katy",
                            FirstName = "Christian",
                            LastName = "Biden",
                            PhoneNumber = "713-756-5412",
                            State = "Texas",
                            ZipCode = "77125"
                        },
                        new
                        {
                            CustomerId = 7,
                            Address = "612 Allan Street",
                            City = "Houston",
                            FirstName = "Mary",
                            LastName = "Jaden",
                            PhoneNumber = "281-789-1854",
                            State = "Texas",
                            ZipCode = "77754"
                        },
                        new
                        {
                            CustomerId = 8,
                            Address = "1612 London Circle",
                            City = "Richmond Hills",
                            FirstName = "Jude",
                            LastName = "Oladipo",
                            PhoneNumber = "281-451-1201",
                            State = "Texas",
                            ZipCode = "77203"
                        },
                        new
                        {
                            CustomerId = 9,
                            Address = "5647 Smith Street",
                            City = "Spring",
                            FirstName = "Chioma",
                            LastName = "Branch",
                            PhoneNumber = "281-789-0254",
                            State = "Texas",
                            ZipCode = "77785"
                        },
                        new
                        {
                            CustomerId = 10,
                            Address = "8963 Houston Street",
                            City = "Houston",
                            FirstName = "Jude",
                            LastName = "Offodile",
                            PhoneNumber = "281-784-8901",
                            State = "Texas",
                            ZipCode = "77251"
                        });
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HireDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "2314 GrandVille Pkwy",
                            City = "Sugarland",
                            FirstName = "John",
                            HireDate = "11/01/2015",
                            LastName = "Doe",
                            PhoneNumber = "281-216-9087",
                            State = "Texas",
                            ZipCode = "77201"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "7865 Swine Street #214",
                            City = "Houston",
                            FirstName = "Michael",
                            HireDate = "12/01/2015",
                            LastName = "Chan",
                            PhoneNumber = "713-623-3212",
                            State = "Texas",
                            ZipCode = "77043"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Address = "30213 Oliver Ln",
                            City = "Crypress",
                            FirstName = "Claire",
                            HireDate = "02/01/2016",
                            LastName = "Jonnas",
                            PhoneNumber = "281-203-1204",
                            State = "Texas",
                            ZipCode = "77901"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Address = "23156 Hills Street #123",
                            City = "Richmond",
                            FirstName = "Smith",
                            HireDate = "03/01/2016",
                            LastName = "Johnson",
                            PhoneNumber = "713-897-9087",
                            State = "Texas",
                            ZipCode = "77874"
                        },
                        new
                        {
                            EmployeeId = 5,
                            Address = "14562 Holly Spring Cir",
                            City = "Cinco",
                            FirstName = "Voke",
                            HireDate = "04/01/2016",
                            LastName = "Oluwafemi",
                            PhoneNumber = "281-985-6675",
                            State = "Texas",
                            ZipCode = "77523"
                        },
                        new
                        {
                            EmployeeId = 6,
                            Address = "'23145 Richmond Avenue",
                            City = "Sugarland",
                            FirstName = "Harry",
                            HireDate = "05/01/2016",
                            LastName = "Porter",
                            PhoneNumber = "281-785-7842",
                            State = "Texas",
                            ZipCode = "77244"
                        },
                        new
                        {
                            EmployeeId = 7,
                            Address = "12786 Galley Lane #456",
                            City = "Richmond",
                            FirstName = "Israel",
                            HireDate = "06/01/2016",
                            LastName = "Ruiz",
                            PhoneNumber = "713-854-8741",
                            State = "Texas",
                            ZipCode = "77879"
                        },
                        new
                        {
                            EmployeeId = 8,
                            Address = "89065 Small Lan",
                            City = "Cinco",
                            FirstName = "Austin",
                            HireDate = "07/01/2016",
                            LastName = "Capstone",
                            PhoneNumber = "281-741-1032",
                            State = "Texas",
                            ZipCode = "77510"
                        });
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("OrderDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SalesAmount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 10001,
                            CustomerId = 1,
                            EmployeeId = 8,
                            OrderDate = "02/21/2021",
                            SalesAmount = 50m,
                            ShipAddress = "10612 Smith Street",
                            ShipCity = "Pasadena",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10002,
                            CustomerId = 2,
                            EmployeeId = 7,
                            OrderDate = "02/21/2021",
                            SalesAmount = 30m,
                            ShipAddress = "588 Alington Place",
                            ShipCity = "Pearland",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10003,
                            CustomerId = 3,
                            EmployeeId = 6,
                            OrderDate = "02/21/2021",
                            SalesAmount = 40m,
                            ShipAddress = "12145 South Loop West",
                            ShipCity = "Houston",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10004,
                            CustomerId = 4,
                            EmployeeId = 5,
                            OrderDate = "02/21/2021",
                            SalesAmount = 60m,
                            ShipAddress = "10612 Barker Street",
                            ShipCity = "Katy",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10005,
                            CustomerId = 5,
                            EmployeeId = 4,
                            OrderDate = "02/21/2021",
                            SalesAmount = 70m,
                            ShipAddress = "1239 Katy Lane #2512",
                            ShipCity = "Crypress",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10006,
                            CustomerId = 6,
                            EmployeeId = 8,
                            OrderDate = "02/21/2021",
                            SalesAmount = 80m,
                            ShipAddress = "10612 Holly Spring Ln",
                            ShipCity = "Katy",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10007,
                            CustomerId = 7,
                            EmployeeId = 7,
                            OrderDate = "02/21/2021",
                            SalesAmount = 44m,
                            ShipAddress = "612 Allan Street",
                            ShipCity = "Houston",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10008,
                            CustomerId = 8,
                            EmployeeId = 6,
                            OrderDate = "02/21/2021",
                            SalesAmount = 64m,
                            ShipAddress = "1612 London Circle",
                            ShipCity = "Richmond Hills",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10009,
                            CustomerId = 9,
                            EmployeeId = 5,
                            OrderDate = "02/21/2021",
                            SalesAmount = 24m,
                            ShipAddress = "5647 Smith Street",
                            ShipCity = "Spring",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        },
                        new
                        {
                            OrderId = 10010,
                            CustomerId = 10,
                            EmployeeId = 4,
                            OrderDate = "02/21/2021",
                            SalesAmount = 60m,
                            ShipAddress = "8963 Houston Street",
                            ShipCity = "Houston",
                            ShippedDate = "02/22/2021",
                            State = "Texas",
                            Zipcode = "77786"
                        });
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 10001,
                            OrderId = 10001,
                            ProductId = 1,
                            Quantity = 5,
                            UnitPrice = 10m
                        },
                        new
                        {
                            OrderDetailId = 10002,
                            OrderId = 10002,
                            ProductId = 2,
                            Quantity = 3,
                            UnitPrice = 10m
                        },
                        new
                        {
                            OrderDetailId = 10003,
                            OrderId = 10003,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 20m
                        },
                        new
                        {
                            OrderDetailId = 10004,
                            OrderId = 10004,
                            ProductId = 4,
                            Quantity = 6,
                            UnitPrice = 10m
                        },
                        new
                        {
                            OrderDetailId = 10005,
                            OrderId = 10005,
                            ProductId = 5,
                            Quantity = 7,
                            UnitPrice = 10m
                        },
                        new
                        {
                            OrderDetailId = 10006,
                            OrderId = 10006,
                            ProductId = 6,
                            Quantity = 4,
                            UnitPrice = 20m
                        },
                        new
                        {
                            OrderDetailId = 10007,
                            OrderId = 10007,
                            ProductId = 7,
                            Quantity = 4,
                            UnitPrice = 11m
                        },
                        new
                        {
                            OrderDetailId = 10008,
                            OrderId = 10008,
                            ProductId = 8,
                            Quantity = 4,
                            UnitPrice = 16m
                        },
                        new
                        {
                            OrderDetailId = 10009,
                            OrderId = 10009,
                            ProductId = 9,
                            Quantity = 3,
                            UnitPrice = 8m
                        },
                        new
                        {
                            OrderDetailId = 10010,
                            OrderId = 10010,
                            ProductId = 10,
                            Quantity = 3,
                            UnitPrice = 20m
                        });
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Category = "Snacks",
                            Price = 10m,
                            ProductName = "Doritos Chips",
                            SupplierId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            Category = "Pantry",
                            Price = 10m,
                            ProductName = "Hawaiian Bread",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            Category = "Dairy",
                            Price = 20m,
                            ProductName = "H-E-B Original Apple Sauce",
                            SupplierId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            Category = "Snacks",
                            Price = 10m,
                            ProductName = "Nabisco Sweet Treats Cookie",
                            SupplierId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            Category = "Beverages",
                            Price = 10m,
                            ProductName = "Evian Natural Spring Water",
                            SupplierId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            Category = "Pantry",
                            Price = 20m,
                            ProductName = "Velveeta Shells & Cheese",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            Category = "Breakfast & Cereal",
                            Price = 11m,
                            ProductName = "Betty Crocker Bisquick Shake Pancakes",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            Category = "Beverages",
                            Price = 16m,
                            ProductName = "Vita Coco Coconut Water",
                            SupplierId = 3
                        },
                        new
                        {
                            ProductId = 9,
                            Category = "Pantry",
                            Price = 8m,
                            ProductName = "6 Pack Hormel Compleats Spaghetti",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            Category = "Breakfast & Cereal",
                            Price = 20m,
                            ProductName = "Butternut Mountain 100% Farm Syrup",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            Category = "Dairy",
                            Price = 6m,
                            ProductName = "Egg-Land Best Organic Egg",
                            SupplierId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            Category = "Beverages",
                            Price = 10m,
                            ProductName = "Coffee Mate Pack of 2",
                            SupplierId = 3
                        },
                        new
                        {
                            ProductId = 13,
                            Category = "Pantry",
                            Price = 11m,
                            ProductName = "BetterBody Foods Pure Avocado Oil",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 14,
                            Category = "Breakfast & Cereal",
                            Price = 9m,
                            ProductName = "Quaker Grits pack of 2",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 15,
                            Category = "Pantry",
                            Price = 10m,
                            ProductName = "Barilla Classic Blue Box Pasta",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 16,
                            Category = "Beverages",
                            Price = 20m,
                            ProductName = "Ocean Spray 100% Orange Juice",
                            SupplierId = 3
                        },
                        new
                        {
                            ProductId = 17,
                            Category = "Pantry",
                            Price = 11m,
                            ProductName = "Mahatma Enriched Extra Long Grain",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 18,
                            Category = "Breakfast & Cereal",
                            Price = 8m,
                            ProductName = "Kellogg's Corn Flakes pack of 2",
                            SupplierId = 2
                        },
                        new
                        {
                            ProductId = 19,
                            Category = "Dairy",
                            Price = 13m,
                            ProductName = "Dole Fruit Bowls Variety Pack",
                            SupplierId = 1
                        },
                        new
                        {
                            ProductId = 20,
                            Category = "Beverages",
                            Price = 15m,
                            ProductName = "Pepsi Soda (2 pack)",
                            SupplierId = 3
                        });
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            CompanyName = "Amingo Inc.",
                            ContactEmail = "cameron.harry@amingo.com",
                            ContactName = "Cameron, Harry",
                            ContactPhone = "713-520-2103"
                        },
                        new
                        {
                            SupplierId = 2,
                            CompanyName = "Josh Brothers",
                            ContactEmail = "doyle.Judy@joshbrothers.net",
                            ContactName = "Doyle Judy",
                            ContactPhone = "281-453-0976"
                        },
                        new
                        {
                            SupplierId = 3,
                            CompanyName = "Jimmy Wholesale Food",
                            ContactEmail = "marie.herz@jimmywholesalefood.com",
                            ContactName = "Marie, Herz",
                            ContactPhone = "281-745-894"
                        });
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("UserId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CustomerId = 1,
                            Email = "genesishoward@aol.com",
                            PassWord = "baller21!"
                        },
                        new
                        {
                            UserId = 2,
                            CustomerId = 2,
                            Email = "christianwalcot@aol.com",
                            PassWord = "christian2005!"
                        },
                        new
                        {
                            UserId = 3,
                            CustomerId = 3,
                            Email = "ngozi.Offodile@gmail.com",
                            PassWord = "ngozi2021!"
                        },
                        new
                        {
                            UserId = 4,
                            CustomerId = 4,
                            Email = "adaobieze@gmail.com",
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            UserId = 5,
                            CustomerId = 5,
                            Email = "tichellemiller@aol.com",
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            UserId = 6,
                            CustomerId = 6,
                            Email = "christainbiden@yahoo.com",
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            UserId = 7,
                            CustomerId = 7,
                            Email = "maryjaden@outlook.com",
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            UserId = 8,
                            CustomerId = 8,
                            Email = "judeoladipo@outlook.com",
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            UserId = 9,
                            CustomerId = 9,
                            Email = "chioma.branch@aol.com",
                            PassWord = "ada2020!"
                        },
                        new
                        {
                            UserId = 10,
                            CustomerId = 10,
                            Email = "judeoffodile@yahoo.com",
                            PassWord = "ada2020!"
                        });
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Admin", b =>
                {
                    b.HasOne("HarrysGroceryStore.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Order", b =>
                {
                    b.HasOne("HarrysGroceryStore.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HarrysGroceryStore.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.OrderDetail", b =>
                {
                    b.HasOne("HarrysGroceryStore.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HarrysGroceryStore.Models.Product", "Product")
                        .WithMany("OrderDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Product", b =>
                {
                    b.HasOne("HarrysGroceryStore.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.User", b =>
                {
                    b.HasOne("HarrysGroceryStore.Models.Customer", "Customer")
                        .WithOne("User")
                        .HasForeignKey("HarrysGroceryStore.Models.User", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Product", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("HarrysGroceryStore.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
